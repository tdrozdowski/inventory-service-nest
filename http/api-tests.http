### Authorization API Tests

# Get JWT token with Basic Auth
# @name authorize
POST {{baseUrl}}/api/v1/authorize
Authorization: Basic Y2xpZW50X2lkOnNlY3JldA==
Content-Type: application/json
Accept: application/json

> {%
    if (response.body && response.body.token) {
        client.global.set("token", response.body.token);
    }
%}

### Items API Tests
# Get all items
GET {{baseUrl}}/api/v1/items
Authorization: Bearer {{token}}
Accept: application/json

### Create Item

# @name createItem
POST {{baseUrl}}/api/v1/items
Authorization: Bearer {{token}}
Content-Type: application/json
Accept: application/json

{
  "name": "Test Item",
  "description": "This is a test item",
  "unit_price": 19.99
}

> {%
    if (response.body && response.body.id) {
        client.global.set("itemId", response.body.alt_id);
        client.global.set("altItemId", response.body.id);
    }
%}

### Get item by ID
GET {{baseUrl}}/api/v1/items/{{itemId}}
Authorization: Bearer {{token}}
Accept: application/json

### Get item by alternative ID
GET {{baseUrl}}/api/v1/items/alt/{{altItemId}}
Authorization: Bearer {{token}}
Accept: application/json

### Update an item
PUT {{baseUrl}}/api/v1/items/{{itemId}}
Authorization: Bearer {{token}}
Content-Type: application/json
Accept: application/json

{
  "name": "Updated Test Item",
  "description": "This is an updated test item",
  "unit_price": 29.99
}



### Persons API Tests

# Get all persons
GET {{baseUrl}}/api/v1/persons
Authorization: Bearer {{token}}
Accept: application/json

### Create a Person
< {%
    const timestamp = new Date().getTime();
    const random = Math.floor(Math.random() * 10000);
    client.global.set("userEmail", `test+${timestamp}${random}@example.com`);
%}
POST {{baseUrl}}/api/v1/persons
Authorization: Bearer {{token}}
Content-Type: application/json
Accept: application/json

{
  "name": "Test Person",
  "email": "{{userEmail}}"
}

> {%
  if (response.body && response.body.id) {
    client.global.set("personId", response.body.id);
    client.global.set("altPersonId", response.body.alt_id);
  }
%}

### Get person by ID
GET {{baseUrl}}/api/v1/persons/{{personId}}
Authorization: Bearer {{token}}
Accept: application/json

### Get person by alternative ID
GET {{baseUrl}}/api/v1/persons/alt/{{altPersonId}}
Authorization: Bearer {{token}}
Accept: application/json

### Get person by email
GET {{baseUrl}}/api/v1/persons/email/test@example.com
Authorization: Bearer {{token}}
Accept: application/json

### Update a person
< {%
  const timestamp = new Date().getTime();
  const random = Math.floor(Math.random() * 10000);
  client.global.set("updatedEmail", `test+${timestamp}${random}@example.com`);
%}
PUT {{baseUrl}}/api/v1/persons/{{personId}}
Authorization: Bearer {{token}}
Content-Type: application/json
Accept: application/json

{
  "name": "Updated Test Person",
  "email": "{{updatedEmail}}"
}



### Invoices API Tests

# Get all invoices
GET {{baseUrl}}/api/v1/invoices
Authorization: Bearer {{token}}
Accept: application/json

### Create an invoice
POST {{baseUrl}}/api/v1/invoices
Authorization: Bearer {{token}}
Content-Type: application/json
Accept: application/json

{
  "total": 49.99,
  "user_id": "{{altPersonId}}",
  "paid": false
}

> {%
    if (response.body && response.body.id) {
        client.global.set("invoiceId", response.body.id);
        client.global.set("altInvoiceId", response.body.alt_id);
    }
%}

### Get invoice by ID
GET {{baseUrl}}/api/v1/invoices/{{invoiceId}}
Authorization: Bearer {{token}}
Accept: application/json

### Get invoice by alternative ID
GET {{baseUrl}}/api/v1/invoices/alt/{{altInvoiceId}}
Authorization: Bearer {{token}}
Accept: application/json

### Get invoices by user ID
GET {{baseUrl}}/api/v1/invoices/user/{{personId}}
Authorization: Bearer {{token}}
Accept: application/json


### Update an invoice
PUT {{baseUrl}}/api/v1/invoices/{{invoiceId}}
Authorization: Bearer {{token}}
Content-Type: application/json
Accept: application/json

{
  "total": 59.99,
  "paid": true
}

### Invoices-Items API Tests

# Get all invoice items
GET {{baseUrl}}/api/v1/invoices-items
Authorization: Bearer {{token}}
Accept: application/json

### Get invoice items by invoice ID
GET {{baseUrl}}/api/v1/invoices-items/invoice/{{invoiceId}}
Authorization: Bearer {{token}}
Accept: application/json

### Get invoice items by item ID
GET {{baseUrl}}/api/v1/invoices-items/item/{{itemId}}
Authorization: Bearer {{token}}
Accept: application/json

### Get specific invoice item
GET {{baseUrl}}/api/v1/invoices-items/{{invoiceId}}/{{itemId}}
Authorization: Bearer {{token}}
Accept: application/json

### Create a new invoice item
POST {{baseUrl}}/api/v1/invoices-items
Authorization: Bearer {{token}}
Content-Type: application/json
Accept: application/json

{
  "invoice_id": "{{altInvoiceId}}",
  "item_id": "{{itemId}}"
}

### Delete a specific invoice item
DELETE {{baseUrl}}/api/v1/invoices-items/{{altInvoiceId}}/{{itemId}}
Authorization: Bearer {{token}}
Accept: application/json

### Delete all invoice items for an invoice
DELETE {{baseUrl}}/api/v1/invoices-items/invoice/{{altInvoiceId}}
Authorization: Bearer {{token}}
Accept: application/json

### Delete an item
DELETE {{baseUrl}}/api/v1/items/{{altItemId}}
Authorization: Bearer {{token}}
Accept: application/json

### Delete all invoice items for an item
DELETE {{baseUrl}}/api/v1/invoices-items/item/{{itemId}}
Authorization: Bearer {{token}}
Accept: application/json

### Delete an invoice
DELETE {{baseUrl}}/api/v1/invoices/{{invoiceId}}
Authorization: Bearer {{token}}
Accept: application/json

### Delete a person
DELETE {{baseUrl}}/api/v1/persons/{{personId}}
Authorization: Bearer {{token}}
Accept: application/json
